package viskoPackage_example.service.operators;

import edu.utep.trustlab.visko.installation.packages.service.operators.types.ToolkitOperator;
import edu.utep.trustlab.visko.installation.packages.service.operators.util.CommandRunner;

public class ExampleOperator_PureJava extends ToolkitOperator {
	
	/*
	 * Is your input data to this operator textual or binary
	 */
	private static final boolean isInputDataTextual = true;
	
	/* 
	 * If you do not want your input data stored in a variable for usage then set "shouldPersistInMemory" to "false" and move on the setting the next variable "baseInputFileName." Otherwise, read below.
	 * 
	 * If you set the above "isInputDataTextual" variable to "true" and set "shouldPersistInMemory" to "true", then the variable "stringData" of type String will contain your input data.
	 * You can access this variable within the method "transform" found below.
	 * 
	 * If you set the above "isInputDataTextual" variable to "false" and set "shouldPersistInMemory" to "true", then the variable "binaryData" of type byte[] will contain your input data.
	 * You can access this variable within the method "transform" found below.
	 */
	private static final boolean shouldPersistInMemory = true;
	
	// the base input name for the dataset generated by this operator
	private static final String baseInputFileName = "inputdata.txt";
	
	// the base output name for the dataset generated by this operator
	private static final String baseOutputFileName = "outputdata.txt";
	
	public ExampleOperator_PureJava(String datasetURL) {
		super(datasetURL, baseInputFileName, isInputDataTextual, shouldPersistInMemory,baseOutputFileName);
	}
	
	public String transform(String param1, String param2, String param3){
		
		/************** Operating on your input data *****************************/
		
		//if you set "isInputDataTextual" to "true" and set "shouldPersistInMemory" to "true", then you can access the variable below
		System.out.println(stringData);
		
		//if you set "isInputDataTextual" to "false" and set "shouldPersistInMemory" to "true", then you can access the variable below
		for(int i = 0; i < binaryData.length; i ++)
			System.out.println(binaryData[i]);
		
		//if you set "shouldPersistInMemory" to "false" then your data was stored in a file located at:
		System.out.println(inputPath);
		
		/************** Add your java code to process the input here ************/
		
		/************** Setting up your output **********************************/
		
		//You need to make sure you write your output dataset to the following path that is already a unique name minted for you:
		System.out.println(outputPath);
		
		//Every transform method must return a URL pointer to your output data that is already minted for you
		System.out.println(outputURL);
	
		return outputURL;
	}
}
