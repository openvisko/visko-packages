<project name="Module_Template" default="war">

	<target name="init">
		<echo level="info">basedir = ${basedir}</echo>
				
		<!-- common build properties -->
		<property name="dir.src" value="${basedir}/src" />
		<property name="dir.webapp" value="${basedir}/webapp" />
		<property name="dir.build" value="${basedir}/build" />
		<property name="dir.classes" value="${dir.build}/classes" />
		<property name="dir.dist" value="${dir.build}/dist" />
		<property name="dir.lib" value="${basedir}/webapp/WEB-INF/lib" />
		<property name="dir.sdk" value="${basedir}/../ModuleSDK"/>	
		<property name="dir.sdk.src" value="${dir.sdk}/src" />
		<property name="dir.sdk.webapp" value="${dir.sdk}/webapp" />
		<basename property="webapp.name" file="${basedir}"/>
		<property name="file.name.war" value="${webapp.name}.war" />
		<property name="dir.war" value="${dir.dist}/${webapp.name}" />
		<property name="file.name.jar" value="${webapp.name}.jar" />
		
		<property file="${basedir}/webapp/WEB-INF/classes/module.properties"/>
				
		<echo level="info">webapp = ${webapp.name}</echo>
		<echo level="info">project = ${ant.project.name}</echo>
		
		<!-- set the classpath to include all the jars from SDK -->
		<path id="classpath">
			<fileset dir="${dir.sdk}/lib">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${dir.sdk}/webapp/WEB-INF/lib">
				<include name="**/*.jar" />
			</fileset>			
			<fileset dir="${basedir}/webapp/WEB-INF/lib">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${basedir}/webapp/WEB-INF/lib">
				<include name="**/*.jar" />
			</fileset>
			<pathelement location="${dir.classes}"/>		
		</path>

		<!-- define the task for converting java to wsdl -->
		<taskdef name="java2wsdl" classname="org.apache.axis2.tool.ant.Java2WSDLTask">
			<classpath refid="classpath" />
		</taskdef>

	</target>

	<target name="clean" depends="init" description="clean the compiled classes and libraries">
		<delete dir="${dir.classes}"/>
	</target>

	<target name="compile-java" depends="init" description="Compiles the Java source code">
		<mkdir dir="${dir.classes}" />
		<javac destdir="${dir.classes}" deprecation="on" debug="on" target="1.6" source="1.6">
			<src path="${dir.src}" />
			<src path="${dir.sdk.src}" />			
			<classpath refid="classpath" />
			<compilerarg value="-Xlint:-path"/>
		</javac>

		<!-- make sure non-java files get included in the jar since they are not included by javac ant target -->
		<copy todir="${dir.classes}">
			<fileset dir="${dir.src}">
				<patternset>
					<exclude name="**/*.java" />
				</patternset>
			</fileset>
		</copy>
		
		<copy todir="${dir.classes}">
			<fileset dir="${dir.sdk.src}">
				<patternset>
					<exclude name="**/*.java" />
				</patternset>
			</fileset>
		</copy>		
	</target>

	<!--- Create the jar file for the package -->
	<target name="package-jar" depends="compile-java" description="Packages the JAR file">
		<delete dir="${dir.dist}"/>
		<mkdir dir="${dir.dist}" />
		<jar jarfile="${dir.dist}/${file.name.jar}" basedir="${dir.classes}" />
		<jar jarfile="${dir.dist}/${file.name.jar}" update="true">
		</jar>
	</target>
	
	<!-- create clean war file -->
	<target name="war" depends="clean, war-incremental" />
	
	<!-- create incremental war (only do incremental compile) -->
	<target name="war-incremental" depends="package-jar">

		<mkdir dir="${dir.war}"/>
		
		<copy todir="${dir.war}" overwrite="true">
			<fileset dir="${dir.sdk.webapp}">
				<include name="**/*" />
			</fileset>
		</copy>
		
		<!-- give your package ability to overwrite any default files provided by package SDK -->
		<copy todir="${dir.war}" overwrite="true">
			<fileset dir="${dir.webapp}">
				<include name="**/*" />
			</fileset>
		</copy>

		<!-- Copy the jar file to the webapp -->
		<copy todir="${dir.war}/WEB-INF/lib" overwrite="true">
			<fileset dir="${dir.dist}">
				<include name="${file.name.jar}" />
			</fileset>
		</copy>
		
		<!-- create war file -->
		<war warfile="${dir.dist}/${file.name.war}" basedir="${dir.war}" />

	</target>
	
	<target name="register-module" depends="compile-java" description="Generate RDF and register package to Visko">
		<echo level="info">content management server = ${content.management.server.url}</echo>
		<java classname="org.openvisko.module.installation.Installer_ContentManager" fork="true">
		
			<jvmarg value="-Djava.security.policy=${policy}"/>
			
			<arg value="velo"/>
			<arg value="${content.management.server.url}"/>
			<arg value="${content.management.server.project.name}"/>
			<arg value="${content.management.server.username}"/>
			<arg value="${content.management.server.password}"/>
			<arg value="${basedir}"/>
			<arg value="${dir.sdk}/dataTypes"/>

            <classpath>
    			<fileset dir="${dir.sdk}/lib">
    				<include name="**/*.jar" />
    			</fileset>
    			<fileset dir="${dir.sdk}/webapp/WEB-INF/lib">
    				<include name="**/*.jar" />
    			</fileset>			
    			<fileset dir="${basedir}/webapp/WEB-INF/lib">
    				<include name="**/*.jar" />
    			</fileset>
    			<fileset dir="${basedir}/lib">
    				<include name="**/*.jar" />
    			</fileset>
    			<pathelement location="${dir.classes}"/>		
            	<pathelement location="${basedir}/webapp/WEB-INF/classes"/>
            </classpath>
		</java>
	</target>

	<!-- build war and generate RDF file for registering service to Visko -->
	<!-- This doesn't work correctly yet -->
	<target name="rdf" depends="compile-java">
	
		<!-- use Java2WSDLTask to generate wsdl -->			
		<java2wsdl className="org.openvisko.module.ModuleService"
		    outputLocation="${dir.dist}"
			locationUri="http://we20657:8080/package_cii/services/PackageService">
            <classpath>
                <pathelement path="${classpath}"/>
                <pathelement location="${dir.classes}"/>
            </classpath>
		</java2wsdl>
		
				
		<!-- create OWL RDF file to register package web service in Visko -->
		
	</target>
	
</project>
